import ActionTypes from './actionTypes';
import {Todo} from './types';

// NOTE: id is usually generated by BE, in this case, we will add it inside TODO reducer
type TodoPayload = Omit<Todo, 'id'>;

export interface AddTodoAction {
  type: ActionTypes.addTodo;
  payload: TodoPayload;
}

type todoIds = Pick<Todo, 'id' | 'sectionId'>;

export interface RemoveTodoAction {
  type: ActionTypes.removeTodo;
  payload: todoIds;
}

type updateTodoPayload = {id: string} & Partial<TodoPayload>;
export interface updateTodoAction {
  type: ActionTypes.updateTodo;
  payload: updateTodoPayload;
}

export interface toggleTodoStatusAction {
  type: ActionTypes.toggleTodoStatus;
  payload: todoIds;
}

export const removeToDos = (id: todoIds): RemoveTodoAction => ({
  type: ActionTypes.removeTodo,
  payload: id,
});

export const addTodo = (todo: TodoPayload): AddTodoAction => ({
  type: ActionTypes.addTodo,
  payload: todo,
});
export const updateTodo = (partialTodo: updateTodoPayload): updateTodoAction => ({
  type: ActionTypes.updateTodo,
  payload: partialTodo,
});

export const toggleTodoStatus = (todo: todoIds): toggleTodoStatusAction => ({
  type: ActionTypes.toggleTodoStatus,
  payload: todo,
});

export type TodoActions =
  | AddTodoAction
  | RemoveTodoAction
  | updateTodoAction
  | toggleTodoStatusAction;
